name: Difatto Toggle Service
on:
  schedule:
    - cron: "0 13 * * *" # run at 10:00 UTC-3 [if changimg this, change job condition below]
    - cron: "0 1 * * *" # run at 22:00 UTC-3
  workflow_dispatch:
    inputs:
      stack:
        description: Stack
        required: true
        type: environment
      tasks_action:
        type: choice
        description: Desired Service Status
        options:
          - on
          - off
env:
  REPO_ORG: "iofreddy85"
  REPO: "difatto-erp-devops"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
  CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
  DB_INSTANCE_NAME: ${{ vars.CRON_UPDATE_DB_INSTANCE_NAME }}
jobs:
  toggle_service:
    environment: ${{ inputs.stack || vars.CRON_UPDATE_DEFAULT_ENV }}
    runs-on: ubuntu-latest
    steps:
      - name: Set parameters
        id: params
        run: |
          if [[ "${{ github.event.schedule }}" == "0 13 * * *" ]]; then
            echo "CRON ON"
            echo "tasks_action=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.schedule }}" == "0 1 * * *" ]]; then
            echo "CRON OFF"
            echo "tasks_action=false" >> $GITHUB_OUTPUT
          else
            echo "MANUAL RUN: ${{ inputs.tasks_action }}"
            echo "tasks_action=${{ inputs.tasks_action }}" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Production ECS Frontend API Service set tasks to desired status
        run: |
          echo ">tasks_action=${{ steps.params.outputs.tasks_action }}"
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_PAYLOAD_SERVICE }} \
            --desired-count ${{ steps.params.outputs.tasks_action == 'true' && '1' || '0' }}
          if [[ "${{ steps.params.outputs.tasks_action }}" == "true" ]]; then
            echo "Starting Database '${{env.DB_INSTANCE_NAME}}'"
            aws rds start-db-instance \
              --db-instance-identifier ${{env.DB_INSTANCE_NAME}}
          else
            echo "Stopping Database '${{env.DB_INSTANCE_NAME}}'"
            aws rds stop-db-instance \
              --db-instance-identifier ${{env.DB_INSTANCE_NAME}}
          fi
    outputs:
      tasks_action: ${{ steps.params.outputs.tasks_action }}
  dns_change:
    environment: ${{ inputs.stack || vars.CRON_UPDATE_DEFAULT_ENV }}
    runs-on: ubuntu-latest
    needs: toggle_service
    if: ${{ needs.toggle_service.outputs.tasks_action == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6
      - name: install-aws-cli-action
        uses: unfor19/install-aws-cli-action@v1
      - name: Dns Update
        working-directory: "./scripts"
        env:
          DNS_ZONE: ${{ vars.CLOUDFLARE_DNS_ZONE }}
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_PAYLOAD_SERVICE }}
          RECORD_ID: ${{ vars.CLOUDFLATE_DNS_RECORD_ID }}
          DNS_NAME: ${{ vars.CLOUDFLARE_DNS_NAME }}
        run: |
          ./dns_change.sh
