name: Difatto Site Deploy
run-name: ${{ inputs.correlation_id }}
on:
  workflow_dispatch:
    inputs:
      correlation_id:
        description: Correlation
        required: false
        type: string
      stack:
        description: Stack
        required: true
        type: environment
      environment:
        description: Environment
        required: true
        type: choice
        options:
          - production
env:
  REPO_ORG: "iofreddy85"
  REPO: "difatto-erp-devops"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_MASTER_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  # CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
  PAT: ${{ secrets.DIFATTO_DEVOPS_PAT }}
jobs:
  build_frontend:
    environment: ${{ inputs.stack }}
    env:
      PROJECT: "difatto-erp-backend"
      BUILD_BRANCH: main
      ECR_IMAGES_REPOSITORY: ${{ vars.ECR_IMAGES_REPOSITORY }}
      API_URL: "http://google.com"
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6
      - name: Run Frontend Build & Push
        id: build
        working-directory: "./scripts"
        run: |
          source ./github_api.sh

          echo "STACK=${{ inputs.stack }}"

          DB_ENDPOINT=$(github_get_env_var $REPO_ORG $REPO ${{ inputs.stack }} DB_ENDPOINT)
          echo "DB_ENDPOINT=$DB_ENDPOINT"

          DATABASE_URI="postgres://postgres:${{ env.DATABASE_PASSWORD }}@$DB_ENDPOINT:5432/${{ env.DB_NAME }}"
          echo "DATABASE_URI=$DATABASE_URI"

          INPUT_PARAMS=$(jq -n \
            --arg database_uri "$DATABASE_URI" \
            '{
              "database_uri": $database_uri
             }' -c)
          IMAGE_TAG=$(./build.sh \
            --input-params="$INPUT_PARAMS" \
            --environment=${{ inputs.environment }} \
            --repository="${{ env.PROJECT }}" \
            --branch="${{ env.BUILD_BRANCH }}" \
            --workflow="build-push.yml")
          echo "FRONTEND_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
    outputs:
      FRONTEND_IMAGE_TAG: ${{steps.build.outputs.FRONTEND_IMAGE_TAG}}
  deploy_prod:
    environment: ${{ inputs.stack }}
    runs-on: ubuntu-latest
    needs: [build_frontend]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      # frontend -> pull current task definition for update in the next step
      - name: Production Pull Frontend API ECS Service task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_PAYLOAD_SERVICE }} | jq '.taskDefinition' > ./difatto-prod-payload.json
      # frontend -> updates task definition with new docker image version
      - name: Production Render Frontend API ECS Service task definition
        id: render-frontend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1.7.2
        with:
          task-definition: ./difatto-prod-payload.json
          container-name: ${{ vars.ECS_PAYLOAD_CONTAINER }}
          image: ${{ needs.build_frontend.outputs.FRONTEND_IMAGE_TAG }}
      # frontend -> signal the service for a new deploy
      - name: Production Deploy Frontend API ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.3.2
        with:
          task-definition: ${{ steps.render-frontend-container.outputs.task-definition }}
          service: ${{ vars.ECS_PAYLOAD_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
      - name: Production ECS Frontend API Service set tasks to 1
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_PAYLOAD_SERVICE }} \
            --desired-count 1
